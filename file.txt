admin:
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 15444

static_resources:
  listeners:
    - name: listener_00
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9090
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: sample_prefix
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        provider_00:
                          issuer: "<issuer>"
                          remote_jwks:
                            http_uri:
                              uri: "http://proxy_cluster"  # Points to the proxy cluster for JWKS requests
                              cluster: proxy_cluster
                              timeout: 1s
                            cache_duration:
                              seconds: 300
                      rules:
                        - match:
                            prefix: "/"
                          requires:
                            provider_name: provider_00
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: route_00
                  virtual_hosts:
                    - name: service_00
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            host_rewrite_literal: localhost
                            cluster: cluster_00  # Routes to the Flask app cluster after JWT validation

  clusters:
    - name: cluster_00
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: cluster_00
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost  # Assuming Flask app is running on the same host
                      port_value: 8888  # Port where your Flask app is running

    - name: proxy_cluster  # Proxy cluster for JWKS requests
      type: STRICT_DNS
      connect_timeout: 0.25s
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: proxy_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: <proxy_server_address>  # Your proxy server address
                      port_value: <proxy_server_port>  # Your proxy server port
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: login.microsoftonline.com




To effectively use a TCP proxy for HTTP(S) traffic in a scenario like fetching JWKS, you would typically need to ensure the following:

Your Proxy Server Configuration: Your firm's proxy server should be configured to handle outbound TCP connections from Envoy and route them to the correct HTTP(S) destination based on the destination IP address, port, or other identifiable information in the TCP stream.

DNS Resolution: Ensure that DNS resolution for the JWKS endpoint (login.microsoftonline.com in your case) is handled in a way that directs Envoy to route the traffic through the TCP proxy. This might involve DNS overrides or specific network routing rules.

Encryption and Security: If the JWKS endpoint uses HTTPS (which is typical for secure JWKS fetching), your TCP proxy setup needs to handle TLS encryption/decryption appropriately, either by terminating TLS at the proxy or by using a tunneling method that preserves end-to-end encryption.

Given these considerations, using a TCP proxy for routing HTTP(S) JWKS requests is less straightforward than managing HTTP(S) traffic directly, due to the additional complexity of correctly handling HTTP(S) requests at the TCP level and ensuring secure, accurate routing of requests to their intended destination.


admin:
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 15444

static_resources:
  listeners:
    - name: listener_00
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9090
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: sample_prefix
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        provider_00:
                          issuer: "<issuer>"
                          # Assuming JWKS is fetched through an application logic or external means
                          local_jwks:
                            inline_string: "{\"keys\":[...]}"

                      rules:
                        - match:
                            prefix: "/"
                          requires:
                            provider_name: provider_00
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: route_00
                  virtual_hosts:
                    - name: service_00
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            host_rewrite_literal: localhost
                            cluster: cluster_00

    - name: tcp_listener  # Listener for routing TCP traffic through proxy
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 12345  # Arbitrary port, adjust as needed
      filter_chains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp_stats
                cluster: tcp_proxy_cluster

  clusters:
    - name: cluster_00
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: cluster_00
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8888

    - name: tcp_proxy_cluster  # TCP Proxy cluster configuration
      type: STRICT_DNS
      connect_timeout: 0.25s
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: tcp_proxy_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: <proxy_server_address>
                      port_value: <proxy_server_port>

To integrate a TCP proxy setup into your existing Envoy configuration for routing JWT verification requests to Microsoft through your firm's proxy, we'll assume that your main goal is to ensure all traffic destined for Microsoft's JWKS endpoint is intercepted and routed through a TCP proxy. This approach is somewhat unconventional for HTTP-based JWKS fetching and might not directly address the high-level operation (e.g., HTTP headers, method, path) but will serve as a basic demonstration of how to route traffic through a TCP proxy.

Given this setup, you'll need to ensure that the actual routing to Microsoft's JWKS endpoint through the TCP proxy is handled by either the proxy itself or through DNS/network configurations outside of Envoy. Here's how you can modify your configuration:

```yaml
admin:
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 15444

static_resources:
  listeners:
    - name: listener_00
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9090
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: sample_prefix
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        provider_00:
                          issuer: "<issuer>"
                          # Assuming JWKS is fetched through an application logic or external means
                          local_jwks:
                            inline_string: "{\"keys\":[...]}"

                      rules:
                        - match:
                            prefix: "/"
                          requires:
                            provider_name: provider_00
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                route_config:
                  name: route_00
                  virtual_hosts:
                    - name: service_00
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            host_rewrite_literal: localhost
                            cluster: cluster_00

    - name: tcp_listener  # Listener for routing TCP traffic through proxy
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 12345  # Arbitrary port, adjust as needed
      filter_chains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: tcp_stats
                cluster: tcp_proxy_cluster

  clusters:
    - name: cluster_00
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: cluster_00
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8888

    - name: tcp_proxy_cluster  # TCP Proxy cluster configuration
      type: STRICT_DNS
      connect_timeout: 0.25s
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: tcp_proxy_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: <proxy_server_address>
                      port_value: <proxy_server_port>

def normalize_parameters(parameters):
    # Check if parameters is explicitly None or an empty list/dict
    if parameters in [None, [], {}]:
        return None  # Return None if parameters are not provided or empty
    # If parameters is a dict, convert to list of {name, value} objects
    elif isinstance(parameters, dict):
        return [{"name": key, "value": parameters[key]} for key in parameters]
    # If parameters is already a list, return as is
    elif isinstance(parameters, list):
        # Further check if items in the list are dicts with 'name' and 'value' keys to avoid double serialization later
        return parameters
    # Add more conditions here if there are other formats to handle
    else:
        return None





class ReleaseInfoController:
    # ... other methods remain unchanged

    def search_release_info(self, only_latest=False, **kwargs):
        """Read release_info entry(s).
        
        If only_latest is True, return only the most recent entry.
        Will return list of entries otherwise. Raises an error if no entry is found.
        """
        search_filter = {}
        
        # Construct search filter based on provided kwargs
        for parameter in ("release_component", "environment", "provider", "release_name", "release_status"):
            if kwargs.get(parameter) is not None:
                if parameter == 'release_status' and kwargs[parameter] == 'Available':
                    search_filter["$or"] = [
                        {"release_status": "Available"},
                        {"release_status": "Recommended"}
                    ]
                else:
                    search_filter[parameter] = kwargs[parameter]
        
        if only_latest:
            # Use the '_id' field to sort by creation time
            latest_entry = list(self.db_model.release_status.find(search_filter).sort('_id', -1).limit(1))
            if latest_entry:
                return latest_entry[0]  # Return the single latest document
            else:
                return None  # Or handle the case when there's no entry
        else:
            return list(self.db_model.release_status.find(search_filter))

    # ... other methods remain unchanged


class ReleaseInfoController:
    # ... other methods remain unchanged

    def search_release_info(self, only_latest=False, **kwargs):
        """Read release_info entry(s).
        
        If only_latest is True, return only the most recent entry.
        Will return list of entries otherwise. Raises an error if no entry is found.
        """
        search_filter = {}

        # Construct search filter based on provided kwargs
        for parameter in ("release_component", "environment", "provider", "release_name", "release_status"):
            if kwargs.get(parameter) is not None:
                if parameter == 'release_status' and kwargs[parameter] == 'Available':
                    search_filter["$or"] = [
                        {"release_status": "Available"},
                        {"release_status": "Recommended"}
                    ]
                else:
                    search_filter[parameter] = kwargs[parameter]

        if only_latest:
            # Use the _id field to sort by insertion order, assuming the latest document has the largest _id
            sort_parameter = {'_id': -1}
            latest_entry = self.db_model.findLast(search_filter, sort_parameter)
            return latest_entry  # Returns the latest single document based on the _id field
        else:
            # Use findMany to retrieve all matching documents
            cursor = self.db_model.findMany(**search_filter)
            return list(cursor)  # Convert the cursor to a list and return it

    # ... other methods remain unchanged

