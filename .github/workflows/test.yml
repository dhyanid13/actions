name: Conditional Job Execution

on:
  workflow_dispatch:
    inputs:
      stages:
        description: 'Enter stages to run (comma-separated)'
        required: true

jobs:
  input-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Input
        run: |
          stages=${{ github.event.inputs.stages }}
          if [[ "$stages" == *"stage4"* && "$stages" != *"stage1"* ]]; then
            echo "Error: Stage 4 requires Stage 1 to be selected."
            exit 1
          fi
          if [[ "$stages" == *"stage5"* && "$stages" != *"stage2"* ]]; then
            echo "Error: Stage 5 requires Stage 2 to be selected."
            exit 1
          fi

  job1:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage1')
    steps:
      - name: Dummy Step 1
        run: echo "Running stage 1"

  job2:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage2')
    steps:
      - name: Dummy Step 2
        run: echo "Running stage 2"

  job3:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage3')
    steps:
      - name: Dummy Step 3
        run: echo "Running stage 3"

  job4:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage4')
    needs: job1
    steps:
      - name: Dummy Step 4
        run: echo "Running stage 4, dependent on stage 1"

  job5:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage5')
    needs: job2
    steps:
      - name: Dummy Step 5
        run: echo "Running stage 5, dependent on stage 2"

  job6:
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.stages, 'stage6')
    steps:
      - name: Dummy Step 6
        run: echo "Running stage 6, independent"




def prepare_and_send_extensions_to_kafka(self, cluster_fqdn, inp):
    """Prepare and send cluster extensions data to Kafka, focusing on individual extensions."""
    
    # Ensure the timestamp is set
    if "timestamp" not in inp:
        inp["timestamp"] = fh.now_ymd_hms_utc_iso8601()  # Set default timestamp if missing

    # Initialize a list to hold each "flattened" extension record for Kafka
    flattened_extensions = []

    # Iterate over each extension in the inp['extensions'] list
    for extension in inp.get("extensions", []):
        # For each extension, prepare a record with cluster and extension details
        record = {
            "cluster_fqdn": str(cluster_fqdn),
            "eonid": int(inp["eonid"]),
            "provider": str(inp["provider"]),
            "env": str(inp["env"]),
            "extensions": extension.get("name"),
            "version": extension.get("version"),
            # Convert parameters to a JSON string or set to None if empty
            "parameter": json.dumps(extension.get("parameters")) if extension.get("parameters") else None,
            # Set data to None or an empty dict as needed (assuming you always want it to be None here)
            "data": None
        }
        # Add the prepared record to the list of flattened extensions
        flattened_extensions.append(record)

    # Convert the list of flattened extension records to a JSON string for sending
    kafka_message = json.dumps(flattened_extensions)

    # Retrieve the Kafka topic from configuration and send the message
    topic = fh.cfg('kafka_topics')["deployed_extensions"]  # Adjust the topic as necessary
    self.kafka_connection.produce(kafka_message, topic)

    # Optionally, return a status or the kafka_message for logging/verification
    return {"status": "Message sent to Kafka", "message": kafka_message}


    "extensions": {
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the extension"
            },
            "version": {
                "type": "string",
                "description": "Version of the extension"
            },
            "parameters": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name of the parameter"
                        },
                        "value": {
                            "type": "string",
                            "description": "Value of the parameter"
                        }
                    },
                    "required": ["name", "value"],
                    "additionalProperties": false
                },
                "description": "Parameters of the extension"
            },
            "data": {
                "type": "object",
                "description": "Additional data for the extension",
                "additionalProperties": true  // Set to false if you want to strictly control the properties within 'data'
            }
        },
        "required": ["name", "version"],
        "additionalProperties": false
    },
    "description": "List of extensions"
}

